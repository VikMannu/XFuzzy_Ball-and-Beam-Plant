//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  OP_BallAndBeamPlant_OP_PRODUCT                           //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Operator set "OP_PRODUCT"             //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package operatorSets;

import membership.OutputMembershipFunction;

public class OP_BallAndBeamPlant_OP_PRODUCT extends OperatorSet {
	public double and(double a, double b) {
		return a * b;
	}

	public double or(double a, double b) {
		return (a > b ? a : b);
	}

	public double also(double a, double b) {
		return (a > b ? a : b);
	}

	public double imp(double a, double b) {
		return (a < b ? a : b);
	}

	public double not(double a) {
		return 1 - a;
	}

	public double very(double a) {
		return a * a;
	}

	public double moreorless(double a) {
		return Math.sqrt(a);
	}

	public double slightly(double a) {
		return 4 * a * (1 - a);
	}

	public double defuz(OutputMembershipFunction mf) {
		double min = 0;
		double max = 24;
		double step = 1;
		double num = 0, denom = 0;
		for (double x = min; x <= max; x += step) {
			double degree = mf.conc[(int) x].degree();
			if (degree != 0) {
				double param = mf.conc[(int) x].param(0);
				num += param * degree;
				denom += degree;
			}
		}
		if (denom == 0)
			return (min + max) / 2;
		return num / denom;
	}
}
