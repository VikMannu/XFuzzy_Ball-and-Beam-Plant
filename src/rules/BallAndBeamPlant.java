//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  BallAndBeamPlant                           //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Fuzzy inference engine "BallAndBeamPlant"       //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package rules;

import inference.FuzzyInferenceEngine;
import inputVariables.TP_BallAndBeamPlant_XPosition;
import inputVariables.TP_BallAndBeamPlant_YVelocity;
import membership.FuzzySingleton;
import membership.MembershipFunction;
import membership.OutputMembershipFunction;
import operatorSets.OP_BallAndBeamPlant_OP_PRODUCT;
import outputVariables.TP_BallAndBeamPlant_ZVoltage;

public class BallAndBeamPlant implements FuzzyInferenceEngine {

	// +++++++++++++++++++++++++++++++++++++++++++++++++++++//
	// Rulebase RL_Rules //
	// +++++++++++++++++++++++++++++++++++++++++++++++++++++//

	private MembershipFunction[] RL_Rules(MembershipFunction X, MembershipFunction Y) {
		double _rl;
		double _input[] = new double[2];
		if (X instanceof FuzzySingleton)
			_input[0] = ((FuzzySingleton) X).getValue();
		if (Y instanceof FuzzySingleton)
			_input[1] = ((FuzzySingleton) Y).getValue();
		OP_BallAndBeamPlant_OP_PRODUCT _op = new OP_BallAndBeamPlant_OP_PRODUCT();
		OutputMembershipFunction Z = new OutputMembershipFunction();
		Z.set(25, _op, _input);
		TP_BallAndBeamPlant_XPosition _t_X = new TP_BallAndBeamPlant_XPosition();
		TP_BallAndBeamPlant_YVelocity _t_Y = new TP_BallAndBeamPlant_YVelocity();
		TP_BallAndBeamPlant_ZVoltage _t_Z = new TP_BallAndBeamPlant_ZVoltage();
		int _i_Z = 0;
		_rl = _op.and(_t_X.NL.isEqual(X), _t_Y.NL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NL);

		_i_Z++;
		_rl = _op.and(_t_X.NL.isEqual(X), _t_Y.NS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NL);

		_i_Z++;
		_rl = _op.and(_t_X.NL.isEqual(X), _t_Y.Z.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NL);

		_i_Z++;
		_rl = _op.and(_t_X.NL.isEqual(X), _t_Y.PS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NS);

		_i_Z++;
		_rl = _op.and(_t_X.NL.isEqual(X), _t_Y.PL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.Z);

		_i_Z++;
		_rl = _op.and(_t_X.NS.isEqual(X), _t_Y.NL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NL);

		_i_Z++;
		_rl = _op.and(_t_X.NS.isEqual(X), _t_Y.NS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NL);

		_i_Z++;
		_rl = _op.and(_t_X.NS.isEqual(X), _t_Y.Z.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NS);

		_i_Z++;
		_rl = _op.and(_t_X.NS.isEqual(X), _t_Y.PS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.Z);

		_i_Z++;
		_rl = _op.and(_t_X.NS.isEqual(X), _t_Y.PL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PS);

		_i_Z++;
		_rl = _op.and(_t_X.Z.isEqual(X), _t_Y.NL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NL);

		_i_Z++;
		_rl = _op.and(_t_X.Z.isEqual(X), _t_Y.NS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NS);

		_i_Z++;
		_rl = _op.and(_t_X.Z.isEqual(X), _t_Y.Z.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.Z);

		_i_Z++;
		_rl = _op.and(_t_X.Z.isEqual(X), _t_Y.PS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PS);

		_i_Z++;
		_rl = _op.and(_t_X.Z.isEqual(X), _t_Y.PL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PL);

		_i_Z++;
		_rl = _op.and(_t_X.PS.isEqual(X), _t_Y.NL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.NS);
		
		_i_Z++;
		_rl = _op.and(_t_X.PS.isEqual(X), _t_Y.NS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.Z);
		
		_i_Z++;
		_rl = _op.and(_t_X.PS.isEqual(X), _t_Y.Z.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PS);
		
		_i_Z++;
		_rl = _op.and(_t_X.PS.isEqual(X), _t_Y.PS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PL);
		
		_i_Z++;
		_rl = _op.and(_t_X.PS.isEqual(X), _t_Y.PL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PL);
		
		_i_Z++;
		_rl = _op.and(_t_X.PL.isEqual(X), _t_Y.NL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.Z);
		
		_i_Z++;
		_rl = _op.and(_t_X.PL.isEqual(X), _t_Y.NS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PS);
		
		_i_Z++;
		_rl = _op.and(_t_X.PL.isEqual(X), _t_Y.Z.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PL);
		
		_i_Z++;
		_rl = _op.and(_t_X.PL.isEqual(X), _t_Y.PS.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PL);
		
		_i_Z++;
		_rl = _op.and(_t_X.PL.isEqual(X), _t_Y.PL.isEqual(Y));
		Z.set(_i_Z, _rl, _t_Z.PL);
		
		MembershipFunction[] _output = new MembershipFunction[1];
		_output[0] = new FuzzySingleton(Z.defuzzify());
		return _output;
	}

	// +++++++++++++++++++++++++++++++++++++++++++++++++++++//
	// Fuzzy Inference Engine //
	// +++++++++++++++++++++++++++++++++++++++++++++++++++++//

	public double[] crispInference(double[] _input) {
		MembershipFunction Position = new FuzzySingleton(_input[0]);
		MembershipFunction Velocity = new FuzzySingleton(_input[1]);
		MembershipFunction Voltage;
		MembershipFunction[] _call;
		_call = RL_Rules(Position, Velocity);
		Voltage = _call[0];
		double _output[] = new double[1];
		if (Voltage instanceof FuzzySingleton)
			_output[0] = ((FuzzySingleton) Voltage).getValue();
		else
			_output[0] = ((OutputMembershipFunction) Voltage).defuzzify();
		return _output;
	}

	public double[] crispInference(MembershipFunction[] _input) {
		MembershipFunction Position = _input[0];
		MembershipFunction Velocity = _input[1];
		MembershipFunction Voltage;
		MembershipFunction[] _call;
		_call = RL_Rules(Position, Velocity);
		Voltage = _call[0];
		double _output[] = new double[1];
		if (Voltage instanceof FuzzySingleton)
			_output[0] = ((FuzzySingleton) Voltage).getValue();
		else
			_output[0] = ((OutputMembershipFunction) Voltage).defuzzify();
		return _output;
	}

	public MembershipFunction[] fuzzyInference(double[] _input) {
		MembershipFunction Position = new FuzzySingleton(_input[0]);
		MembershipFunction Velocity = new FuzzySingleton(_input[1]);
		MembershipFunction Voltage;
		MembershipFunction[] _call;
		_call = RL_Rules(Position, Velocity);
		Voltage = _call[0];
		MembershipFunction _output[] = new MembershipFunction[1];
		_output[0] = Voltage;
		return _output;
	}

	public MembershipFunction[] fuzzyInference(MembershipFunction[] _input) {
		MembershipFunction Position = _input[0];
		MembershipFunction Velocity = _input[1];
		MembershipFunction Voltage;
		MembershipFunction[] _call;
		_call = RL_Rules(Position, Velocity);
		Voltage = _call[0];
		MembershipFunction _output[] = new MembershipFunction[1];
		_output[0] = Voltage;
		return _output;
	}

}
